From 74d7a2ba83902db8a2549d832b8c574524febbfa Mon Sep 17 00:00:00 2001
From: shaleijie <sha.leijie@99cloud.net>
Date: Thu, 2 Jun 2022 01:43:22 +0800
Subject: Add role for DCAP services
diff --git a/ansible/group_vars/all.yml b/ansible/group_vars/all.yml
index ac3fb236c..d077c851f 100644
--- a/ansible/group_vars/all.yml
+++ b/ansible/group_vars/all.yml
@@ -546,6 +546,7 @@ enable_openstack_core: "yes"
 
 # These roles are required for Kolla to be operation, however a savvy deployer
 # could disable some of these required roles and run their own services.
+enable_dcap: "no"
 enable_glance: "{{ enable_openstack_core | bool }}"
 enable_haproxy: "yes"
 enable_keepalived: "{{ enable_haproxy | bool }}"
diff --git a/ansible/roles/dcap/defaults/main.yml b/ansible/roles/dcap/defaults/main.yml
new file mode 100644
index 000000000..828019257
--- /dev/null
+++ b/ansible/roles/dcap/defaults/main.yml
@@ -0,0 +1,74 @@
+---
+project_name: dcap
+log_dir: /opt/intel/sgx-dcap-pccs/logs
+custom_dcap_server_ssl: false
+
+dcap_services:
+  dcap-server:
+    container_name: dcap_server
+    group: control
+    enabled: true
+    image: "{{ dcap_server_image_full }}"
+    volumes: "{{ dcap_server_volumes + dcap_server_extra_volumes if custom_dcap_server_ssl|bool else dcap_server_volumes }}"
+    haproxy:
+      dcap_server:
+        enabled: "{{ enable_dcap }}"
+        mode: "tcp"
+        external: false
+        port: "{{ dcap_port }}"
+      dcap_server_external:
+        enabled: "{{ enable_dcap }}"
+        mode: "tcp"
+        external: true
+        port: "{{ dcap_port }}"
+  dcap-register:
+    container_name: dcap_register
+    group: compute
+    enabled: true
+    image: "{{ dcap_register_image_full }}"
+    volumes: "{{ dcap_register_volumes }}"
+
+dcap_server_service: "dcap-server"
+dcap_register_service: "dcap-register"
+
+dcap_uri: "https://api.trustedservices.intel.com/sgx/certification/v3/"
+dcap_port: "8081"
+dcap_host: "{{ api_interface_address }}"
+dcap_api_key: ""
+dcap_proxy: ""
+# hash sha512 of dcap_user_password
+dcap_user_password_hash: ""
+# hash sha512 of dcap_admin_password
+dcap_admin_password_hash: ""
+dcap_cache_fill_mode: "LAZY"
+dcap_log_level: "info"
+
+dcap_database_type: "mysql"
+dcap_database_username: "dcap"
+dcap_database_host: "{{ database_address }}"
+dcap_database_name: "pckcache"
+custom_dcap_namespace: "custom"
+
+dcap_server_image_name: "dcap-server"
+dcap_server_image_tag: "latest"
+dcap_server_image_full: "{{ docker_registry ~ '/' if docker_registry else '' }}{{ custom_dcap_namespace }}/{{ dcap_server_image_name }}:{{ dcap_server_image_tag }}"
+
+dcap_register_image_name: "dcap-register"
+dcap_register_image_tag: "latest"
+dcap_register_image_full: "{{ docker_registry ~ '/' if docker_registry else '' }}{{ custom_dcap_namespace }}/{{ dcap_register_image_name }}:{{ dcap_register_image_tag }}"
+
+dcap_server_volumes:
+  - "kolla_logs:{{ log_dir }}"
+  - "/etc/localtime:/etc/localtime:ro"
+  - "{{ node_config_directory }}/{{ dcap_server_service }}/dcap-server.json:/opt/intel/sgx-dcap-pccs/config/default.json"
+
+dcap_server_extra_volumes:
+  - "{{ node_config_directory }}/{{ dcap_server_service }}/csr.pem:/opt/intel/sgx-dcap-pccs/ssl_key/csr.pem"
+  - "{{ node_config_directory }}/{{ dcap_server_service }}/file.crt:/opt/intel/sgx-dcap-pccs/ssl_key/file.crt"
+  - "{{ node_config_directory }}/{{ dcap_server_service }}/private.pem:/opt/intel/sgx-dcap-pccs/ssl_key/private.pem"
+
+dcap_register_volumes:
+  - "/etc/localtime:/etc/localtime:ro"
+  - "/lib/modules:/lib/modules:ro"
+  - "/dev:/dev:rw"
+  - "/sys/firmware:/sys/firmware:ro"
diff --git a/ansible/roles/dcap/handlers/main.yml b/ansible/roles/dcap/handlers/main.yml
new file mode 100644
index 000000000..e1777e99e
--- /dev/null
+++ b/ansible/roles/dcap/handlers/main.yml
@@ -0,0 +1,18 @@
+---
+- name: Restart dcap-server container
+  vars:
+    service_name: "{{ dcap_server_service }}"
+    service: "{{ dcap_services[service_name] }}"
+  become: true
+  docker_container:
+    name: "{{ service.container_name }}"
+    image: "{{ service.image }}"
+    state: started
+    restart: yes
+    restart_policy: unless-stopped
+    network_mode: host
+    command: "dcap-server"
+    volumes: "{{ service.volumes }}"
+  when:
+    - inventory_hostname in groups[service.group]
+    - service.enabled | bool
diff --git a/ansible/roles/dcap/meta/main.yml b/ansible/roles/dcap/meta/main.yml
new file mode 100644
index 000000000..6b4fff8fe
--- /dev/null
+++ b/ansible/roles/dcap/meta/main.yml
@@ -0,0 +1,3 @@
+---
+dependencies:
+  - { role: common }
diff --git a/ansible/roles/dcap/tasks/bootstrap.yml b/ansible/roles/dcap/tasks/bootstrap.yml
new file mode 100644
index 000000000..b0a86e54c
--- /dev/null
+++ b/ansible/roles/dcap/tasks/bootstrap.yml
@@ -0,0 +1,34 @@
+---
+- name: Creating dcap database
+  become: true
+  kolla_toolbox:
+    module_name: mysql_db
+    module_args:
+      login_host: "{{ database_address }}"
+      login_port: "{{ database_port }}"
+      login_user: "{{ database_user }}"
+      login_password: "{{ database_password }}"
+      name: "{{ dcap_database_name }}"
+  run_once: True
+  delegate_to: "{{ groups['control'][0] }}"
+
+- name: Creating dcap database user and setting permissions
+  become: true
+  kolla_toolbox:
+    module_name: mysql_user
+    module_args:
+      login_host: "{{ database_address }}"
+      login_port: "{{ database_port }}"
+      login_user: "{{ database_user }}"
+      login_password: "{{ database_password }}"
+      name: "{{ dcap_database_username }}"
+      password: "{{ dcap_database_password }}"
+      host: "%"
+      priv: "{{ dcap_database_name }}.*:ALL"
+      append_privs: "yes"
+  run_once: True
+  delegate_to: "{{ groups['control'][0] }}"
+  when:
+    - not use_preconfigured_databases | bool
+
+- include_tasks: bootstrap_service.yml
diff --git a/ansible/roles/dcap/tasks/bootstrap_service.yml b/ansible/roles/dcap/tasks/bootstrap_service.yml
new file mode 100644
index 000000000..1758b5725
--- /dev/null
+++ b/ansible/roles/dcap/tasks/bootstrap_service.yml
@@ -0,0 +1,36 @@
+---
+- name: Running dcap register container
+  vars:
+    service_name: "{{ dcap_register_service }}"
+    service: "{{ dcap_services[service_name] }}"
+  become: true
+  docker_container:
+    name: "{{ service.container_name }}"
+    image: "{{ service.image }}"
+    state: started
+    auto_remove: yes
+    restart_policy: no
+    network_mode: host
+    command: "dcap-register"
+    volumes: "{{ service.volumes }}"
+  when:
+    - inventory_hostname in groups[service.group]
+    - service.enabled | bool
+    - hostvars[inventory_hostname].enable_sgx | default(false) | bool
+
+- name: Validating if the registration is complete
+  vars:
+    service_name: "{{ dcap_register_service }}"
+    service: "{{ dcap_services[service_name] }}"
+  become: true
+  docker_container_info:
+    name: "{{ service.container_name }}"
+  register: dcap_register_info
+  until:
+    - dcap_register_info.container is none or dcap_register_info.container.State.Status == "exited"
+  retries: 10
+  delay: 6
+  when:
+    - inventory_hostname in groups[service.group]
+    - service.enabled | bool
+    - hostvars[inventory_hostname].enable_sgx | default(false) | bool
diff --git a/ansible/roles/dcap/tasks/config.yml b/ansible/roles/dcap/tasks/config.yml
new file mode 100644
index 000000000..312b4d29c
--- /dev/null
+++ b/ansible/roles/dcap/tasks/config.yml
@@ -0,0 +1,48 @@
+---
+- name: Ensuring config directories exist
+  file:
+    path: "{{ node_config_directory }}/{{ item.key }}"
+    state: "directory"
+    owner: "{{ config_owner_user }}"
+    group: "{{ config_owner_group }}"
+    mode: "0770"
+  become: true
+  when:
+    - inventory_hostname in groups[item.value.group]
+    - item.value.enabled | bool
+  with_dict: "{{ dcap_services }}"
+
+- name: Copying over dcap-server.json
+  vars:
+    service_name: "{{ dcap_server_service }}"
+    service: "{{ dcap_services[service_name] }}"
+  template:
+    src: "dcap-server.json.j2"
+    dest: "{{ node_config_directory }}/{{ service_name }}/dcap-server.json"
+    mode: "0660"
+  become: true
+  when:
+    - inventory_hostname in groups[service.group]
+    - service.enabled | bool
+  notify:
+    - "Restart {{ service_name }} container"
+
+- name: Copying over custom ssl files
+  vars:
+    service_name: "{{ dcap_server_service }}"
+    service: "{{ dcap_services[service_name] }}"
+  copy:
+    src: "{{ node_custom_config }}/{{ service_name }}/{{ item }}"
+    dest: "{{ node_config_directory }}/{{ service_name }}/{{ item }}"
+    mode: "0660"
+  become: true
+  when:
+    - inventory_hostname in groups[service.group]
+    - service.enabled | bool
+    - custom_dcap_server_ssl | bool
+  with_items:
+    - "csr.pem"
+    - "file.crt"
+    - "private.pem"
+  notify:
+    - "Restart {{ service_name }} container"
diff --git a/ansible/roles/dcap/tasks/deploy.yml b/ansible/roles/dcap/tasks/deploy.yml
new file mode 100644
index 000000000..4f6eaa6db
--- /dev/null
+++ b/ansible/roles/dcap/tasks/deploy.yml
@@ -0,0 +1,11 @@
+---
+- include: precheck.yml
+
+- include: pull.yml
+
+- include: config.yml
+
+- include: bootstrap.yml
+
+- name: Flush handlers
+  meta: flush_handlers
diff --git a/ansible/roles/dcap/tasks/loadbalancer.yml b/ansible/roles/dcap/tasks/loadbalancer.yml
new file mode 100644
index 000000000..043207f09
--- /dev/null
+++ b/ansible/roles/dcap/tasks/loadbalancer.yml
@@ -0,0 +1,7 @@
+---
+- name: "Configure haproxy for {{ project_name }}"
+  import_role:
+    role: haproxy-config
+  vars:
+    project_services: "{{ dcap_services }}"
+  tags: always
diff --git a/ansible/roles/dcap/tasks/main.yml b/ansible/roles/dcap/tasks/main.yml
new file mode 100644
index 000000000..bc5d1e625
--- /dev/null
+++ b/ansible/roles/dcap/tasks/main.yml
@@ -0,0 +1,2 @@
+---
+- include_tasks: "{{ kolla_action }}.yml"
diff --git a/ansible/roles/dcap/tasks/precheck.yml b/ansible/roles/dcap/tasks/precheck.yml
new file mode 100644
index 000000000..7043bb265
--- /dev/null
+++ b/ansible/roles/dcap/tasks/precheck.yml
@@ -0,0 +1,24 @@
+---
+- name: Get container facts
+  vars:
+    service_name: "{{ dcap_server_service }}"
+    service: "{{ dcap_services[service_name] }}"
+  become: true
+  kolla_container_facts:
+    name:
+      - "{{ service.container_name }}"
+  register: container_facts
+
+- name: Checking free port for dcap-server
+  vars:
+    service_name: "{{ dcap_server_service }}"
+    service: "{{ dcap_services[service_name] }}"
+  wait_for:
+    host: "{{ api_interface_address }}"
+    port: "{{ dcap_port }}"
+    connect_timeout: 1
+    timeout: 1
+    state: stopped
+  when:
+    - container_facts[service.container_name] is not defined
+    - inventory_hostname in groups[service.group]
diff --git a/ansible/roles/dcap/tasks/pull.yml b/ansible/roles/dcap/tasks/pull.yml
new file mode 100644
index 000000000..22912d3d5
--- /dev/null
+++ b/ansible/roles/dcap/tasks/pull.yml
@@ -0,0 +1,11 @@
+---
+- name: Pulling dcap images
+  become: true
+  kolla_docker:
+    action: "pull_image"
+    common_options: "{{ docker_common_options }}"
+    image: "{{ item.value.image }}"
+  when:
+    - inventory_hostname in groups[item.value.group]
+    - item.value.enabled | bool
+  with_dict: "{{ dcap_services }}"
diff --git a/ansible/roles/dcap/tasks/reconfigure.yml b/ansible/roles/dcap/tasks/reconfigure.yml
new file mode 100644
index 000000000..f670a5b78
--- /dev/null
+++ b/ansible/roles/dcap/tasks/reconfigure.yml
@@ -0,0 +1,2 @@
+---
+- include_tasks: deploy.yml
diff --git a/ansible/roles/dcap/tasks/stop.yml b/ansible/roles/dcap/tasks/stop.yml
new file mode 100644
index 000000000..c6732b6ae
--- /dev/null
+++ b/ansible/roles/dcap/tasks/stop.yml
@@ -0,0 +1,12 @@
+---
+- name: "Stopping dcap server containers"
+  vars:
+    service_name: "{{ dcap_server_service }}"
+    service: "{{ dcap_services[service_name] }}"
+  docker_container:
+    name: "{{ service.container_name }}"
+    state: stopped
+  when:
+    - service.enabled | bool
+    - service.container_name not in skip_stop_containers
+    - inventory_hostname in groups[service.group]
diff --git a/ansible/roles/dcap/tasks/upgrade.yml b/ansible/roles/dcap/tasks/upgrade.yml
new file mode 100644
index 000000000..ed97d539c
--- /dev/null
+++ b/ansible/roles/dcap/tasks/upgrade.yml
@@ -0,0 +1 @@
+---
diff --git a/ansible/roles/dcap/templates/dcap-server.json.j2 b/ansible/roles/dcap/templates/dcap-server.json.j2
new file mode 100644
index 000000000..fd9a5d11e
--- /dev/null
+++ b/ansible/roles/dcap/templates/dcap-server.json.j2
@@ -0,0 +1,52 @@
+{
+    "HTTPS_PORT" : {{ dcap_port }},
+    "hosts" : "{{ dcap_host }}",
+    "uri": "{{ dcap_uri }}",
+    "ApiKey" : "{{ dcap_api_key }}",
+    "proxy" : "{{ dcap_proxy }}",
+    "RefreshSchedule": "0 0 1 * * *",
+    "UserTokenHash" : "{{ dcap_user_password_hash }}",
+    "AdminTokenHash" : "{{ dcap_admin_password_hash }}",
+    "CachingFillMode" : "{{ dcap_cache_fill_mode }}",
+    "LogLevel" : "{{ dcap_log_level }}",
+    "DB_CONFIG" : "{{ dcap_database_type }}",
+    "sqlite" : {
+        "database" : "database",
+        "username" : "{{ dcap_database_username }}",
+        "password" : "{{ dcap_database_password }}",
+        "options" : {
+            "host": "localhost",
+            "dialect": "sqlite",
+            "pool": {
+                "max": 5,
+                "min": 0,
+                "acquire": 30000,
+                "idle": 10000
+            },
+            "define": {
+                "freezeTableName": true
+            },
+            "logging" : false,
+            "storage": "pckcache.db"
+        }
+    },
+    "mysql" : {
+        "database" : "{{ dcap_database_name }}",
+        "username" : "{{ dcap_database_username }}",
+        "password" : "{{ dcap_database_password }}",
+        "options" : {
+            "host": "{{ dcap_database_host }}",
+            "dialect": "mysql",
+            "pool": {
+                "max": 5,
+                "min": 0,
+                "acquire": 30000,
+                "idle": 10000
+            },
+            "define": {
+                "freezeTableName": true
+            },
+            "logging" : false
+        }
+    }
+}
diff --git a/ansible/site.yml b/ansible/site.yml
index ffd32c370..395e52f00 100644
--- a/ansible/site.yml
+++ b/ansible/site.yml
@@ -163,6 +163,11 @@
             tasks_from: loadbalancer
           tags: cyborg
           when: enable_cyborg | bool
+        - include_role:
+            role: dcap
+            tasks_from: loadbalancer
+          tags: dcap
+          when: enable_dcap | bool
         - include_role:
             role: designate
             tasks_from: loadbalancer
@@ -590,6 +595,17 @@
         tags: etcd,
         when: enable_etcd | bool }
 
+- name: Apply role dcap
+  gather_facts: false
+  hosts:
+    - control
+    - compute
+  serial: '{{ kolla_serial|default("0") }}'
+  roles:
+    - { role: dcap,
+        tags: dcap,
+        when: enable_dcap | bool }
+
 - name: Apply role keystone
   gather_facts: false
   hosts:
diff --git a/etc/kolla/globals.yml b/etc/kolla/globals.yml
index d01f4a75c..eac210428 100644
--- a/etc/kolla/globals.yml
+++ b/etc/kolla/globals.yml
@@ -774,6 +774,13 @@ workaround_ansible_issue_8743: yes
 # telemetry data.
 #telegraf_enable_docker_input: "no"

+######
+# DCAP
+######
+# dcap_api_key:
+# dcap_user_password_hash:
+# dcap_admin_password_hash:
+
 ##########################################
 # Octavia - openstack loadbalancer Options
 ##########################################
diff --git a/etc/kolla/passwords.yml b/etc/kolla/passwords.yml
index 8d0e7343a..98a283fa5 100644
--- a/etc/kolla/passwords.yml
+++ b/etc/kolla/passwords.yml
@@ -58,6 +58,8 @@ barbican_crypto_key:
 blazar_database_password:
 blazar_keystone_password:

+dcap_database_password:
+
 keystone_admin_password:
 keystone_database_password:
